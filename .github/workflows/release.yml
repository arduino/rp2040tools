name: release

on:
  push: # only for testing

jobs:
  build:
    runs-on:
      ubuntu-latest
    env:
      LIBUSB_DIR: /opt/lib/libusb-1.0.20/libusb/
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64]
        include:
        - os: linux
          cross_compile: x86_64-ubuntu16.04-linux-gnu
        - os: linux
          arch: 386
          cross_compile: i686-ubuntu16.04-linux-gnu
        - os: linux
          arch: arm
          cross_compile: arm-linux-gnueabihf
        - os: linux
          arch: arm64
          cross_compile: aarch64-linux-gnu
        - os: darwin
          cross_compile: x86_64-apple-darwin13
          cross_compiler: o64-clang
        - os: windows
          arch: 386
          cross_compile: i686-w64-mingw32
          extension: .exe
        exclude:
          - os: windows
            arch: amd64

    container:
      image: ghcr.io/arduino/crossbuild:0.1.0
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.RP2040_CI_PAT }}
    
    steps:
    - name: Checkout rp2040tools repository
      uses: actions/checkout@v2
      with:
        repository: arduino/rp2040tools
        path: rp2040tools
        token: ${{ secrets.RP2040_CI_PAT }}

    - name: Checkout picotool
      uses: actions/checkout@v2
      with:
        repository: raspberrypi/picotool
        path: picotool

    - name: Checkout pico-sdk
      uses: actions/checkout@v2
      with:
        repository: raspberrypi/pico-sdk
        path: pico-sdk

    - name: Set env vars
      run: | 
        echo "LIBUSBUDEV=/opt/lib/${{ matrix.cross_compile }}/libusbudev.a" >> $GITHUB_ENV
        echo "PICO_SDK_PATH=${GITHUB_WORKSPACE}/pico-sdk" >> $GITHUB_ENV
      if: matrix.os != 'darwin'
    
    - name: Set env vars for macos
      run: |
        echo "LIBUSBUDEV=$LIBUSB_DIR.libs/libusb-1.0.a" >> $GITHUB_ENV
        echo "PICO_SDK_PATH=${GITHUB_WORKSPACE}/pico-sdk" >> $GITHUB_ENV
      if: matrix.os == 'darwin'

    - name: Set env var for win
      run: echo "CFLAGS="-mno-ms-bitfields $CFLAGS"" >> $GITHUB_ENV
      if: matrix.os == 'windows'
    
    - name: Build picotool
      run: |
        cd $GITHUB_WORKSPACE/picotool
        git apply $GITHUB_WORKSPACE/rp2040tools/patches/picotool_cmakelists.patch
        git apply $GITHUB_WORKSPACE/rp2040tools/patches/windows_mingw.patch
        mkdir build
        cd build
        cmake -DCMAKE_C_COMPILER=${{ matrix.cross_compile }}-gcc -DCMAKE_CXX_COMPILER=${{ matrix.cross_compile }}-g++ -DLIBUSB_LIBRARIES=$LIBUSBUDEV -DLIBUSB_INCLUDE_DIR=$LIBUSB_DIR ..
        make
        mv picotool${{ matrix.extension }} /tmp/
      if: matrix.os != 'darwin'

    - name: Build picotool for macos
      run: |
        cd $GITHUB_WORKSPACE/picotool
        mkdir build
        cd build
        cmake -DCMAKE_C_COMPILER=${{ matrix.cross_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cross_compiler }}++ -DCMAKE_CXX_FLAGS="-framework IOKit -framework Cocoa" -DLIBUSB_LIBRARIES=$LIBUSBUDEV -DLIBUSB_INCLUDE_DIR=$LIBUSB_DIR ..
        make
        mv picotool${{ matrix.extension }} /tmp/
      if: matrix.os == 'darwin'

    - name: Build elf2uf2
      run: |
        cd $GITHUB_WORKSPACE/pico-sdk/tools/elf2uf2/
        git apply $GITHUB_WORKSPACE/rp2040tools/patches/elf2uf2_cmakelists.patch
        mkdir build
        cd build
        cmake -DCMAKE_C_COMPILER=${{ matrix.cross_compile }}-gcc -DCMAKE_CXX_COMPILER=${{ matrix.cross_compile }}-g++ ..
        make
        mv elf2uf2${{ matrix.extension }} /tmp/
      if: matrix.os != 'darwin'

    - name: Build elf2uf2 for macos
      run: |
        cd $GITHUB_WORKSPACE/pico-sdk/tools/elf2uf2/
        mkdir build
        cd build
        cmake -DCMAKE_C_COMPILER=${{ matrix.cross_compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cross_compiler }}++ -DCMAKE_CXX_FLAGS="-framework IOKit -framework Cocoa" ..
        make
        mv elf2uf2${{ matrix.extension }} /tmp/
      if: matrix.os == 'darwin'

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: tools_${{matrix.os}}_${{matrix.arch}}
        path: |
          /tmp/elf2uf2${{ matrix.extension }}
          /tmp/picotool${{ matrix.extension }}

  build-go:
    runs-on:
      ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64]
        include:
        - os: linux
        - os: linux
          arch: 386
        - os: linux
          arch: arm
        - os: linux
          arch: arm64
        - os: darwin
        - os: windows
          arch: 386
          extension: .exe
        exclude:
          - os: windows
            arch: amd64
    steps:
    - name: Checkout rp2040tools repository
      uses: actions/checkout@v2
      with:
        repository: arduino/rp2040tools
        token: ${{ secrets.RP2040_CI_PAT }}

    - name: Install Go
      uses: actions/setup-go@v2
      with:
          go-version: "1.15.8"

    - name: Build rp2040load
      run: go build
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      
    - name: Debug print
      run: file rp2040load${{ matrix.extension }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: rp2040load_${{matrix.os}}_${{matrix.arch}}
        path: rp2040load${{ matrix.extension }}